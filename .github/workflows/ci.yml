name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.11", "3.12"]
      fail-fast: false

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Check package availability
      run: |
        echo "Checking package availability for Python ${{ matrix.python-version }}"
        python --version
        pip index versions agentrylab || echo "agentrylab package not found on PyPI"
      timeout-minutes: 2
    
    - name: Install dependencies
      run: |
        echo "Installing dependencies for Python ${{ matrix.python-version }}"
        python -m pip install --upgrade pip
        pip install --no-cache-dir -r requirements.txt
        # Install quality check tools for our enhanced test runner
        pip install --no-cache-dir black mypy bandit
        echo "Dependencies installed successfully"
      timeout-minutes: 10
    
    - name: Lint with flake8
      run: |
        # Stop the build if there are Python syntax errors or undefined names
        flake8 bot/ --count --select=E9,F63,F7,F82 --show-source --statistics
        # Exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 bot/ --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    
    - name: Run comprehensive tests and quality checks
      run: |
        # Run all tests and quality checks using our enhanced test runner
        # This includes: unit tests, Black formatting, MyPy type checking, and Bandit security
        python run_tests.py
    
    - name: Test coverage
      run: |
        pip install coverage
        # Use our enhanced test runner for coverage
        # Note: This will run unit tests only for coverage (quality checks don't need coverage)
        coverage run -m unittest discover tests/ -v || echo "No unit tests found, running basic import test"
        coverage report -m
        coverage html
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  security:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install --no-cache-dir -r requirements.txt
        pip install --no-cache-dir safety bandit
      timeout-minutes: 10
    
    - name: Security check with safety
      run: |
        safety check
    
    - name: Security check with bandit
      run: |
        bandit -r bot/ -f json -o bandit-report.json || true
        bandit -r bot/

  docker:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build Docker image
      run: |
        docker build -t agentrylab-telegram-bot:test .
    
    - name: Test Docker image
      run: |
        docker run --rm agentrylab-telegram-bot:test python -c "import bot; print('Bot module imported successfully')"
